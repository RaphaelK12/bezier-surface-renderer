TODO

MAIN:
Write a program that can convert Bézier patches to polygons and then display the result.


REQUIRED:
[X] Read in a list of patch data from a file.
[X] Tessellate/triangulate the patch using either a uniform or adaptive technique. (You have to implement both, your program will have a command-line flag to determine which is used.)
[X] Open a window and use OpenGL to Render the object.
[X] When "s" is pressed the program will toggle between flat and smooth shading.
[X] When "w" is pressed the program will toggle between filled and wireframe mode.
[X] When the arrow keys are pressed the object will be rotated.
[X] When the shift+arrow keys are pressed the object will be translated.
[X] When launched the initial zoom will show the entire object. Pressing the +/- keys will zoom in/
out.
[X] Your program will take two command line arguments with a third option parameter. These
are: the input file name, the subdivision parameter, and a flag which determines if subdivision should be adaptive or uniform. An example command would look like:
% myprogram3 inputfile.bez 0.1 -a 
[X] use Maya to create an additional input file
[ ] website


OPTIONAL:
[X] When "h" is pressed the program will toggle between filled and hidden-line mode.
[X] The use of OBJ input
[X] The use of OBJ output
[ ] Add the ability to load multiple objects (for example a mix of .bez and .obj files) and display them each with different transformations. 
[ ]  Refer to the example GLSL code posted on the website and implement a custom shader for your object display.
[ ] video of use
[ ] When “c” is pressed the program will do vertex color shading based on the Gaussian Curvature of the surface.






printf("=======================\n");
points[0][0] = Point(0.0 , 0.0 , 0.0);
points[0][1] = Point(0.0 , 0.33 , 1.0);
points[0][2] = Point(0.0 , 0.66 , 1.0);
points[0][3] = Point(0.0 , 1.0 , 0.0);

points[1][0] = Point(0.33 , 0.0 , 0.0);
points[1][1] = Point(0.33 , 0.33 , 1.0);
points[1][2] = Point(0.33 , 0.66 , 1.0);
points[1][3] = Point(0.33 , 1.0 , 0.0);

points[2][0] = Point(0.66 , 0.0 , 0.0);
points[2][1] = Point(0.66 , 0.33 , 1.0);
points[2][2] = Point(0.66 , 0.66 , 1.0);
points[2][3] = Point(0.66 , 1.0 , 0.0);

points[3][0] = Point(1.0 , 0.0 , 0.0);
points[3][1] = Point(1.0 , 0.33 , 1.0);
points[3][2] = Point(1.0 , 0.66 , 1.0);
points[3][3] = Point(1.0 , 1.0 , 0.0);



printf(" 0,0: ");
interpolate(0, 0).point.print();
 printf(" 0,1: ");
interpolate(0, 1).point.print();
 printf(" 1,0: ");
interpolate(1, 0).point.print();
 printf(" 1,1: ");
interpolate(1, 1).point.print();
 printf("\n\n");
 printf(" 0,0.5: ");
 interpolate(0, 0.5).point.print();
  printf(" 0.5,0: ");
 interpolate(0.5, 0).point.print();
  printf(" 0.5,0.5: ");
 interpolate(0.5, 0.5).point.print();
  printf(" 1,1: ");
 interpolate(0.25, 0.25).point.print();
  printf("\n\n");
printf("Points 0,0: "); 
points[0][0].print();
printf("Points 0,3: ");
points[0][3].print();
printf("Points 3,0: ");
points[3][0].print();
printf("Points 3,3: ");
points[3][3].print();
printf("\n\n");
